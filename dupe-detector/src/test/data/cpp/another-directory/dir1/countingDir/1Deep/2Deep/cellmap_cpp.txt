#include "cellMap.h"

using namespace std;

/**
 * Record in the map the approrpiate assignment of a character to a cell.
 * Must run in O(1) average time.
 *
 * @param character the character whose position is being recorded
 * @param characterPositions the mapping from cell indices to the characters in that cell
 * @param cellSize the width of a cell, also the max distance at which characters can see one another
 */
void recordPosition(const Character &character, CellMap &characterPositions, int cellSize)
{
  CellIndex index;
  index.i = character.x / cellSize;
  index.j = character.y / cellSize;
  characterPositions.insert(CellMap::value_type(index, character));
}

/**
 * Check to see if a given character can see any others.
 * Must run in O(1) average time.
 *
 * @param character the character whose field of vision is to be checked
 * @param characterPositions the mapping from cell indices to the characters in that cell
 * @param cellSize the width of a cell, also the max distance at which characters can see one another
 * @returns true if this character can see at least one other. 
 */
bool canSeeAnotherCharacter(const Character &character, const CellMap &characterPositions, int cellSize)
{
  for (int xOffset = -1; xOffset <= 1; ++xOffset)
    for (int yOffset = -1; yOffset <= 1; ++yOffset)
    {
      CellIndex index;
      index.i = xOffset + character.x / cellSize;
      index.j = yOffset + character.y / cellSize;
      auto range = characterPositions.equal_range(index);
      for (auto pos = range.first; pos != range.second; ++pos)
      {
        const Character &other = pos->second;
        if (!(other == character))
        {
          long dsq = character.distanceSq(other);
          long limit = cellSize;
          if (dsq <= limit * limit)
            return true;
        }
      }
    }
  return false;
}
