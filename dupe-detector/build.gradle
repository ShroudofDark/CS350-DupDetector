/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'groovy'
    id "org.xbib.gradle.plugin.git" version "2.0.0"
    id "org.xbib.gradle.plugin.jflex" version "1.4.0"
    id 'edu.odu.cs.report_accumulator' version '1.3' 
}

sourceSets {
  main {
     jflex {
       srcDir "src/main/jflex"
     }
  }
}

java {
	//Project is to be built in Java 11
	sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    ivy { // for report_accumulator
        url 'https://www.cs.odu.edu/~zeil/ivyrepo'
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
	
	// Use Hamcrest in cojunction with JUnit to allow readable tests
	testImplementation 'org.hamcrest:hamcrest-library:2.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'edu.odu.cs.cs350.dupedetector.App'
}

tasks.named('test') {
	//Continue the build even if tests fail
	ignoreFailures = true
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Code for reporting tasks adapted from course material for CS350, Zeil.

task reports (dependsOn: ['javadoc', 'test']) {
    description 'Generate reports for this project'
}

task copyDocs (type: Copy, dependsOn: ['reports' ]) {
    from 'build/docs'
    into 'build/gh-pages/docs'
}

task copyReports (type: Copy, dependsOn: ['reports']) {
    from 'build/reports'
    into 'build/gh-pages/reports'
}

// Currently erroring per email to professor Zeil.
reportStats.reportsURL = 'https://john-hix.github.io/CS350-dupe-detector/reports/'
deployReports.deployDestination = 'build/reports/';

task commitReports (dependsOn: ['reportStats', 'reports', 'copyDocs', 'copyReports' ]) {
    group = "Reporting"
    description  'Copies reports to the gh-pages build dir in preparation for a future push to GitHub'
    doLast {
        exec {
            workingDir "$buildDir/gh-pages/reports"
            commandLine '/bin/sh', '-c', 'date > date.txt'
        }
        def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['reports/', 'docs/', 'index.md'])
        grgit.add (update: true, patterns: ['reports/', 'docs/', 'index.md'])
        grgit.commit {
            message = "Updating web pages"
        }
        // There is no push here.
        // Ci will handle this; gives local author room to fix
        // VC mistakes like prematurely committed documentation.
    }
}
