/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "org.xbib.gradle.plugin.jflex" version "1.4.0"
}

sourceSets {
  main {
     jflex {
       srcDir "src/main/jflex"
     }
  }
}

java {
	//Project is to be built in Java 11
	sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
	
	// Use Hamcrest in cojunction with JUnit to allow readable tests
	testImplementation 'org.hamcrest:hamcrest-library:2.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'edu.odu.cs.cs350.dupedetector.App'
}

tasks.named('test') {
	//Continue the build even if tests fail
	ignoreFailures = true
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


// Commands to run programs as subprocesses adapted from code at
// https://www.baeldung.com/run-shell-command-in-java.
//
// Code for reporting tasks adapted from course material for CS350, Zeil.

task reports (dependsOn: ['javadoc', 'test']) {
    description 'Generate reports for this project'
}

task copyDocs (type: Copy, dependsOn: ['reports', 'gitWorktree']) {
    from 'build/docs'
    into '_site/docs'
}

task copyReports (type: Copy, dependsOn: ['reports', 'gitWorktree']) {
    from 'build/reports'
    into '_site/reports'
}

task gitWorktree() {
    description 'Adds a worktree for the gh-pages branch to the _site directory'
    Process process;
    process = Runtime.getRuntime()
        .exec(String.format("git worktree add _site gh-pages"));
    int exitCode = process.waitFor();
}

task deployReports (dependsOn: ['reports', 'gitWorktree', 'copyDocs', 'copyReports' ]) {
    description 'Adds and commits the project website assets in the _site worktree'
    doLast {
        ProcessBuilder addCommandbuilder = new ProcessBuilder();
        addCommandbuilder.directory(new File(System.getProperty("user.dir") + "/_site")); // TODO: windows?
        addCommandbuilder.command("git", "add", ".");
        Process addProcess = addCommandbuilder.start();
        int addExitCode = addProcess.waitFor();

        ProcessBuilder commitCommandBuilder = new ProcessBuilder();
        commitCommandBuilder.directory(new File(System.getProperty("user.dir") + "/_site")); // TODO: windows?
        commitCommandBuilder.command("git", "commit", "-m", "Updates website from Gradle task");
        Process commitProcess = commitCommandBuilder.start();
        int commitExitCode = commitProcess.waitFor();
    }
}

build.dependsOn deployReports
